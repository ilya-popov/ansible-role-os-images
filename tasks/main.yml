---
- name: Ensure Ansible uses virtualenv python interpreter
  set_fact:
    ansible_python_interpreter: "{{ os_images_venv }}/bin/python"

- name: Ensure download cache dir exists
  file:
    path: "{{ os_images_cache }}"
    state: directory

- name: Generate per-image cache directories
  file:
    path: "{{ os_images_cache }}/{{ item.name }}"
    state: directory
  with_items: "{{ os_images_list }}"

- name: Install a suitable version of diskimage-builder
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version or omit }}"
    state: present
    virtualenv: "{{ os_images_venv }}"
  with_items:
    - name: diskimage-builder
      version: "{{ os_images_dib_version }}"

- name: Git clone any additional image element repos
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.local }}"
    version: "{{ item.version | default('HEAD') }}"
  with_items: "{{ os_images_git_elements }}"

- name: Set a fact containing the default DIB environment
  set_fact:
    os_image_dib_env_default:
      ELEMENTS_PATH: "{{ os_images_elements | join(':') }}"

- name: Generate diskimage-builder images
  command: >
    {{ os_images_venv }}/bin/disk-image-create
      {% if item.size is defined %}--image-size {{ item.size }}{% endif %}
      {{ os_images_common }}
      {{ item.elements | join( ' ' ) }} -o {{ item.name }}
  args:
    chdir: "{{ os_images_cache }}/{{ item.name }}"
    creates: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.qcow2"
  environment: "{{ os_image_dib_env_default | combine(item.env | default({})) }}"
  with_items: "{{ os_images_list }}"

- block:
    - name: Upload cloud tenant kernel for baremetal images
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name ~ '-kernel' }}"
        state: present
        is_public: yes
        container_format: aki
        disk_format: aki
        filename: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.vmlinuz"
      with_items: "{{ os_images_list }}"
      when: "{{ 'baremetal' in item.elements }}"
      register: kernel_result

    - name: Upload cloud tenant ramdisk for baremetal images
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name ~ '-ramdisk' }}"
        state: present
        is_public: yes
        container_format: ari
        disk_format: ari
        filename: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.initrd"
      with_items: "{{ os_images_list }}"
      when: "{{ 'baremetal' in item.elements }}"
      register: ramdisk_result

    - name: Upload cloud tenant images
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.0.name }}"
        state: present
        is_public: yes
        container_format: bare
        disk_format: qcow2
        filename: "{{ os_images_cache }}/{{ item.0.name }}/{{ item.0.name }}.qcow2"
        properties: "{{ os_images_common_properties | combine(item.0.properties | default({})) or omit }}"
        kernel: "{{ item.1.id if 'baremetal' in item.0.elements else omit }}"
        ramdisk: "{{ item.2.id if 'baremetal' in item.0.elements else omit }}"
      with_together:
        - "{{ os_images_list }}"
        - "{{ kernel_result.results }}"
        - "{{ ramdisk_result.results }}"
  when: os_images_upload | bool

# This variable is unset before we set it, and it does not appear to be
# possible to unset a variable in Ansible.
- name: Set a fact to reset the Ansible python interpreter
  set_fact:
    ansible_python_interpreter: /usr/bin/python
