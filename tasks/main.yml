---
# qemu-img is required when building qcow images, or extracting cloud images in
# qcow format.
- name: Ensure qemu-img is installed
  yum:
    name: qemu-img
    state: installed
  become: True

# The rpm-distro element executes 'semanage' during its cleanup phase.
- name: Ensure diskimage-builder SELinux dependencies are installed
  yum:
    name: policycoreutils-python
    state: installed
  when:
    - ansible_selinux != False
    - "ansible_selinux.status != 'disabled'"
  become: True

- name: Ensure download cache dir exists
  file:
    path: "{{ os_images_cache }}"
    state: directory
  become: True

- name: Remove old images for force rebuild
  file:
    path: "{{ os_images_cache }}/{{ item.name }}"
    state: absent
  when: item.force_rebuild | default(os_images_force_rebuild) | bool
  with_items: "{{ os_images_list }}"
  tags: clean

- name: Generate per-image cache directories
  file:
    path: "{{ os_images_cache }}/{{ item.name }}"
    state: directory
  with_items: "{{ os_images_list }}"

- name: Download the image to the directory when an image_url is defined
  get_url:
    url: "{{ item.image_url }}"
    dest: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.{{ item.type | default('qcow2') }}"
  with_items: "{{ os_images_list }}"
  when: item.image_url is defined

- name: Install a suitable version of diskimage-builder
  pip:
    name: "{{ item.name }}"
    version: "{{ item.version or omit }}"
    state: present
    virtualenv: "{{ os_images_venv }}"
  with_items:
    - name: diskimage-builder
      version: "{{ os_images_dib_version }}"

- name: Git clone any additional image element repos
  git:
    repo: "{{ item.repo }}"
    dest: "{{ item.local }}"
    version: "{{ item.version | default('HEAD') }}"
  with_items: "{{ os_images_git_elements }}"

- name: Set a fact containing paths to DIB elements
  set_fact:
    os_images_elements_path: "{{ os_images_elements }}"

- name: Incorporate git-sourced DIB elements
  set_fact:
    os_images_elements_path: >
      {{ os_images_elements_path +
         [item.local ~ '/' ~ item.elements_path] }}
  with_items: "{{ os_images_git_elements }}"
  when: item.elements_path is defined

- name: Set a fact containing the default DIB environment
  set_fact:
    os_image_dib_env_default:
      ELEMENTS_PATH: "{{ os_images_elements_path | join(':') }}"

- name: Generate diskimage-builder images
  command: >
    {{ os_images_venv }}/bin/disk-image-create
      {% if item.size is defined %}--image-size {{ item.size }}{% endif %}
      {% if item.type is defined %}-t {{ item.type }}{% endif %}
      {{ os_images_common }}
      {{ item.elements | join( ' ' ) }} -o {{ item.name }}
  args:
    chdir: "{{ os_images_cache }}/{{ item.name }}"
    creates: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.d/dib-manifests"
  environment: "{{ os_image_dib_env_default | combine(item.env | default({})) }}"
  with_items: "{{ os_images_list }}"
  failed_when: false
  register: result
  # The output of this command can be quite large, and is not very useful as
  # a JSON blob.
  when: item.elements is defined
  no_log: true

- name: Ensure DIB build logs are copied if the image failed to build
  copy:
    content: "{{ item.0[item.1] }}"
    dest: "{{ os_images_cache }}/{{ item.0.item.name }}/{{ item.0.item.name }}.{{ item.1 }}"
  with_nested:
    - "{{ result.results }}"
    - [stdout, stderr]
  when:
    - not item.0|skipped
    - item.0.rc != 0
    - item.1 in item.0
  # The output of this command can be quite large, and is not very useful as
  # a JSON blob.
  no_log: true

- name: Fail if any images failed to build
  fail:
    msg: >
      Image {{ item.0.name }} failed to build. See
      {{ item.0.name }}.stdout and {{ item.0.name }}.stderr in
      {{ os_images_cache }}/{{ item.0.name }}.
  when:
    - item.0.elements is defined
    - item.1 != 0
  # Avoid iterating over the results directly as the output can be large, and
  # adding no_log will suppress the failure message.
  with_together:
    - "{{ os_images_list }}"
    - "{{ result.results | map(attribute='rc') | list }}"

- block:
    - name: Set a fact about the current python interpreter
      set_fact:
        old_ansible_python_interpreter: "{{ ansible_python_interpreter | default('/usr/bin/python') }}"

    - name: Ensure Ansible uses virtualenv python interpreter
      set_fact:
        ansible_python_interpreter: "{{ os_images_venv }}/bin/python"

    - name: Ensure existing cloud tenant kernel does not exist
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name ~ '-kernel' }}"
        state: absent
      with_items: "{{ os_images_list }}"
      when:
        - item.elements is defined 
        - '"baremetal" in item.elements'
        - item.force_rebuild | default(os_images_force_rebuild) | bool
      tags: clean

    - name: Upload cloud tenant kernel for baremetal images
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name ~ '-kernel' }}"
        state: present
        is_public: yes
        container_format: aki
        disk_format: aki
        filename: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.vmlinuz"
      with_items: "{{ os_images_list }}"
      when:
        - item.elements is defined 
        - '"baremetal" in item.elements'
      register: kernel_result

    - name: Ensure existing cloud tenant ramdisk does not exist
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name ~ '-ramdisk' }}"
        state: absent
      with_items: "{{ os_images_list }}"
      when:
        - item.elements is defined 
        - '"baremetal" in item.elements'
        - item.force_rebuild | default(os_images_force_rebuild) | bool
      tags: clean

    - name: Upload cloud tenant ramdisk for baremetal images
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name ~ '-ramdisk' }}"
        state: present
        is_public: yes
        container_format: ari
        disk_format: ari
        filename: "{{ os_images_cache }}/{{ item.name }}/{{ item.name }}.initrd"
      with_items: "{{ os_images_list }}"
      when:
        - item.elements is defined 
        - '"baremetal" in item.elements'
      register: ramdisk_result

    - name: Ensure existing cloud tenant image does not exist
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.name }}"
        state: absent
      with_items: "{{ os_images_list }}"
      when: item.force_rebuild | default(os_images_force_rebuild) | bool
      tags: clean

    - name: Upload cloud tenant images
      os_image:
        auth_type: "{{ os_images_auth_type }}"
        auth: "{{ os_images_auth }}"
        name: "{{ item.0.name }}"
        state: present
        is_public: yes
        container_format: bare
        disk_format: "{{ item.type | default('qcow2') }}"
        filename: "{{ os_images_cache }}/{{ item.0.name }}/{{ item.0.name }}.{{ item.type | default('qcow2') }}"
        properties: "{{ os_images_common_properties | combine(item.0.properties | default({})) or omit }}"
        kernel: "{{ item.1.id if is_baremetal else omit }}"
        ramdisk: "{{ item.2.id if is_baremetal else omit }}"
      vars:
        is_baremetal: "{{ item.0.elements is defined and 'baremetal' in item.0.elements }}"
      with_together:
        - "{{ os_images_list }}"
        - "{{ kernel_result.results }}"
        - "{{ ramdisk_result.results }}"

    # This variable is unset before we set it, and it does not appear to be
    # possible to unset a variable in Ansible.
    - name: Set a fact to reset the Ansible python interpreter
      set_fact:
        ansible_python_interpreter: "{{ old_ansible_python_interpreter }}"

  when: os_images_upload | bool
